service: import-service

frameworkVersion: "3"

plugins:
  - serverless-esbuild # used for compiling/packaging the Typescript code
  - serverless-offline # used for local execution

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-central-1
  stage: dev
  environment:
    PRODUCTS_TABLE_NAME: Products
    STOCKS_TABLE_NAME: Stocks
    BUCKET_NAME: import-service-products-data
    PREFIX_NAME: uploaded
    SQS_URL:
      Ref: SQSQueue
  iamRoleStatements:
    - Effect: Allow
      Action: s3:ListBucket
      Resource:
        - arn:aws:s3:::import-service-products-data
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        - arn:aws:s3:::import-service-products-data/*
    - Effect: Allow
      Action:
        - sqs:*
      Resource:
        Fn::GetAtt:
          - SQSQueue
          - Arn
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:PutItem
      Resource: 'arn:aws:dynamodb:eu-central-1:333974565954:*'

  httpApi:
    cors:
      allowedOrigins:
        - http://localhost:5000
        - https://dr1rynhak7llz.cloudfront.net

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: import-service-queue

functions:
  # Serverless Framework specific syntax
  importProductsFile:
    handler: ./src/handlers/importProductsFile.handler
    events:
      - httpApi:
          path: /api/import
          method: GET
      - httpApi:
          path: /api/import
          method: OPTIONS
  importFileParser:
    handler: ./src/handlers/importFileParser.handler
    events:
      - s3:
          bucket: import-service-products-data
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
            - suffix: .csv
          existing: true
  catalogBatchProcess:
    handler: ./src/handlers/catalogBatchProcess.handler
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn
