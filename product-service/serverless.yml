service: product-service

frameworkVersion: "3"

plugins:
  - serverless-esbuild # used for compiling/packaging the Typescript code
  - serverless-offline # used for local execution

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-central-1
  stage: dev
  environment:
    PRODUCTS_TABLE_NAME: Products
    STOCKS_TABLE_NAME: Stocks
    SNS_ARN:
      Ref: createProductTopic
  httpApi:
    cors:
      allowedOrigins:
        - http://localhost:5000
        - https://dr1rynhak7llz.cloudfront.net
  iam:
    role:
      statements: # permissions for all of your functions can be set here
        - Effect: Allow
          Action: # Gives permission to DynamoDB tables in a specific region
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 'arn:aws:dynamodb:eu-central-1:333974565954:*'
        - Effect: Allow
          Action:
            - sqs:*
          Resource:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn
        - Effect: Allow
          Action:
            - sns:*
          Resource:
            Ref: createProductTopic


functions:
  # Serverless Framework specific syntax
  getProductList:
    handler: ./src/handlers/getProductList.handler
    events:
      - httpApi:
          path: /api/products
          method: GET
      - httpApi:
          path: /api/products
          method: OPTIONS

  createProduct:
    handler: ./src/handlers/createProduct.handler
    events:
      - httpApi:
          path: /api/products
          method: POST

  getProductById:
    handler: ./src/handlers/getProductById.handler
    events:
      - httpApi:
          path: /api/product/{productId}
          method: GET
      - httpApi:
          path: /api/product/{productId}
          method: OPTIONS

  populateProducts:
    handler: ./src/handlers/populateProducts.handler
  catalogBatchProcess:
    handler: ./src/handlers/catalogBatchProcess.handler
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn

resources:
  Resources:
    catalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalog-items-queue
    createProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: catalog-items-topic
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: mishavjalv48@gmail.com
        Protocol: email
        TopicArn:
          Ref: createProductTopic
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Products
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    StocksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Stocks
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
  Outputs:
    QueueArn:
      Value:
        Fn::GetAtt: [ catalogItemsQueue, Arn ]
      Export:
        Name: QueueArn
    QueueUrl:
      Value:
        Fn::GetAtt: [ catalogItemsQueue, QueueUrl ]
      Export:
        Name: QueueUrl
